// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb.proto

package streamstorepb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Entry struct {
	StreamId StreamID `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3,customtype=StreamID" json:"stream_id"`
	Data     []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	//wal ID
	ID                   uint64   `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Entry) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

//StreamOffset stream offset range [from,to)
type StreamOffset struct {
	StreamId StreamID `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3,customtype=StreamID" json:"stream_id"`
	//from stream offset begin in this segment file
	From int64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	//to stream offset end in this segment file,excluded
	To int64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	//offset absolute offset in segment file
	Offset               int64    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamOffset) Reset()         { *m = StreamOffset{} }
func (m *StreamOffset) String() string { return proto.CompactTextString(m) }
func (*StreamOffset) ProtoMessage()    {}
func (*StreamOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{1}
}
func (m *StreamOffset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamOffset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamOffset.Merge(m, src)
}
func (m *StreamOffset) XXX_Size() int {
	return m.Size()
}
func (m *StreamOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamOffset.DiscardUnknown(m)
}

var xxx_messageInfo_StreamOffset proto.InternalMessageInfo

func (m *StreamOffset) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *StreamOffset) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *StreamOffset) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type SegmentFooter struct {
	CreateTS             int64                   `protobuf:"varint,1,opt,name=CreateTS,proto3" json:"CreateTS,omitempty"`
	StreamOffsets        map[uint64]StreamOffset `protobuf:"bytes,2,rep,name=streamOffsets,proto3" json:"streamOffsets" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FirstEntryId         uint64                  `protobuf:"varint,3,opt,name=first_entry_id,json=firstEntryId,proto3" json:"first_entry_id,omitempty"`
	LastEntryId          uint64                  `protobuf:"varint,4,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SegmentFooter) Reset()         { *m = SegmentFooter{} }
func (m *SegmentFooter) String() string { return proto.CompactTextString(m) }
func (*SegmentFooter) ProtoMessage()    {}
func (*SegmentFooter) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{2}
}
func (m *SegmentFooter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentFooter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentFooter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentFooter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentFooter.Merge(m, src)
}
func (m *SegmentFooter) XXX_Size() int {
	return m.Size()
}
func (m *SegmentFooter) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentFooter.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentFooter proto.InternalMessageInfo

func (m *SegmentFooter) GetCreateTS() int64 {
	if m != nil {
		return m.CreateTS
	}
	return 0
}

func (m *SegmentFooter) GetStreamOffsets() map[uint64]StreamOffset {
	if m != nil {
		return m.StreamOffsets
	}
	return nil
}

func (m *SegmentFooter) GetFirstEntryId() uint64 {
	if m != nil {
		return m.FirstEntryId
	}
	return 0
}

func (m *SegmentFooter) GetLastEntryId() uint64 {
	if m != nil {
		return m.LastEntryId
	}
	return 0
}

type StreamTimeStampOffset struct {
	//metrics stream ID
	StreamId StreamID `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3,customtype=StreamID" json:"stream_id"`
	//TimestampMS time series samples timestamp
	TimestampMS int64 `protobuf:"varint,2,opt,name=TimestampMS,proto3" json:"TimestampMS,omitempty"`
	//Offset stream offset
	Offset               int64    `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	ID                   uint64   `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamTimeStampOffset) Reset()         { *m = StreamTimeStampOffset{} }
func (m *StreamTimeStampOffset) String() string { return proto.CompactTextString(m) }
func (*StreamTimeStampOffset) ProtoMessage()    {}
func (*StreamTimeStampOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{3}
}
func (m *StreamTimeStampOffset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamTimeStampOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamTimeStampOffset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamTimeStampOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamTimeStampOffset.Merge(m, src)
}
func (m *StreamTimeStampOffset) XXX_Size() int {
	return m.Size()
}
func (m *StreamTimeStampOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamTimeStampOffset.DiscardUnknown(m)
}

var xxx_messageInfo_StreamTimeStampOffset proto.InternalMessageInfo

func (m *StreamTimeStampOffset) GetTimestampMS() int64 {
	if m != nil {
		return m.TimestampMS
	}
	return 0
}

func (m *StreamTimeStampOffset) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *StreamTimeStampOffset) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type OffsetIndexFileTableHeader struct {
	Ts                   int64    `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Ver                  string   `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`
	Count                int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	TsFrom               int64    `protobuf:"varint,4,opt,name=ts_from,json=tsFrom,proto3" json:"ts_from,omitempty"`
	TsTo                 int64    `protobuf:"varint,5,opt,name=ts_to,json=tsTo,proto3" json:"ts_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OffsetIndexFileTableHeader) Reset()         { *m = OffsetIndexFileTableHeader{} }
func (m *OffsetIndexFileTableHeader) String() string { return proto.CompactTextString(m) }
func (*OffsetIndexFileTableHeader) ProtoMessage()    {}
func (*OffsetIndexFileTableHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{4}
}
func (m *OffsetIndexFileTableHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffsetIndexFileTableHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffsetIndexFileTableHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffsetIndexFileTableHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffsetIndexFileTableHeader.Merge(m, src)
}
func (m *OffsetIndexFileTableHeader) XXX_Size() int {
	return m.Size()
}
func (m *OffsetIndexFileTableHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_OffsetIndexFileTableHeader.DiscardUnknown(m)
}

var xxx_messageInfo_OffsetIndexFileTableHeader proto.InternalMessageInfo

func (m *OffsetIndexFileTableHeader) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *OffsetIndexFileTableHeader) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *OffsetIndexFileTableHeader) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *OffsetIndexFileTableHeader) GetTsFrom() int64 {
	if m != nil {
		return m.TsFrom
	}
	return 0
}

func (m *OffsetIndexFileTableHeader) GetTsTo() int64 {
	if m != nil {
		return m.TsTo
	}
	return 0
}

func init() {
	proto.RegisterType((*Entry)(nil), "yatsdb.Entry")
	proto.RegisterType((*StreamOffset)(nil), "yatsdb.StreamOffset")
	proto.RegisterType((*SegmentFooter)(nil), "yatsdb.SegmentFooter")
	proto.RegisterMapType((map[uint64]StreamOffset)(nil), "yatsdb.SegmentFooter.StreamOffsetsEntry")
	proto.RegisterType((*StreamTimeStampOffset)(nil), "yatsdb.StreamTimeStampOffset")
	proto.RegisterType((*OffsetIndexFileTableHeader)(nil), "yatsdb.offset_index_file_table_header")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_f80abaa17e25ccc8) }

var fileDescriptor_f80abaa17e25ccc8 = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0x76, 0xfe, 0x62, 0xb6, 0x92, 0x2c, 0x4b, 0x1b, 0x75, 0x88, 0x90, 0x0d, 0x83, 0x87, 0x20,
	0x18, 0x61, 0xbd, 0x88, 0xc7, 0x18, 0x17, 0xe6, 0x20, 0x42, 0x4f, 0xf0, 0xb0, 0x97, 0xa1, 0xc7,
	0xe9, 0x89, 0x83, 0x99, 0x74, 0xe8, 0xae, 0x5d, 0xcc, 0x0b, 0x78, 0xf6, 0x1d, 0x7c, 0x99, 0x3d,
	0x7a, 0xf6, 0xb0, 0x48, 0x9e, 0x44, 0xfa, 0x87, 0x30, 0xcb, 0xde, 0x72, 0xab, 0xaa, 0xae, 0xaa,
	0x6f, 0xea, 0xfb, 0xbe, 0x81, 0xee, 0xb6, 0x98, 0x6d, 0xa5, 0x40, 0x41, 0x3a, 0x3b, 0x86, 0xaa,
	0x2c, 0x46, 0xc3, 0x95, 0x58, 0x09, 0x53, 0x7a, 0xa3, 0x23, 0xfb, 0x9a, 0x5c, 0x41, 0xf4, 0x71,
	0x83, 0x72, 0x47, 0x5e, 0xc3, 0x89, 0x42, 0xc9, 0x59, 0x93, 0xd7, 0x65, 0xec, 0x4d, 0xbc, 0x69,
	0x38, 0x3f, 0xbb, 0xbd, 0x3b, 0x7f, 0xf4, 0xf7, 0xee, 0xbc, 0x9b, 0x99, 0x87, 0x74, 0x41, 0xbb,
	0xb6, 0x25, 0x2d, 0x09, 0x81, 0xb0, 0x64, 0xc8, 0x62, 0x7f, 0xe2, 0x4d, 0xfb, 0xd4, 0xc4, 0xe4,
	0x14, 0xfc, 0x74, 0x11, 0x07, 0x7a, 0x96, 0xfa, 0xe9, 0x22, 0xd9, 0x41, 0xdf, 0x4e, 0x7e, 0xae,
	0x2a, 0xc5, 0xf1, 0x08, 0x88, 0x4a, 0x8a, 0xc6, 0x40, 0x04, 0xd4, 0xc4, 0x1a, 0x02, 0x85, 0x81,
	0x08, 0xa8, 0x8f, 0x82, 0x3c, 0x83, 0x8e, 0x30, 0xcb, 0xe3, 0xd0, 0xd4, 0x5c, 0x96, 0xfc, 0xf6,
	0x61, 0x90, 0xf1, 0x55, 0xc3, 0x37, 0x78, 0x29, 0x04, 0x72, 0x49, 0x46, 0xd0, 0xfd, 0x20, 0x39,
	0x43, 0xbe, 0xcc, 0x0c, 0x76, 0x40, 0x0f, 0x39, 0x59, 0xc2, 0x40, 0xb5, 0x3e, 0x54, 0xc5, 0xfe,
	0x24, 0x98, 0xf6, 0x2e, 0xa6, 0x33, 0x4b, 0xdd, 0xec, 0xde, 0xa6, 0x59, 0xfb, 0x26, 0x65, 0xc8,
	0x9b, 0x87, 0xfa, 0x0c, 0x7a, 0x7f, 0x09, 0x79, 0x09, 0xa7, 0x55, 0x2d, 0x15, 0xe6, 0x5c, 0xf7,
	0xe8, 0x9b, 0x2d, 0x35, 0x7d, 0x53, 0x35, 0x83, 0x69, 0x49, 0x12, 0x18, 0xac, 0x59, 0xbb, 0x29,
	0x34, 0x4d, 0x3d, 0x5d, 0x74, 0x3d, 0xa3, 0x2f, 0x40, 0x1e, 0x82, 0x92, 0x33, 0x08, 0xbe, 0xf3,
	0x9d, 0x25, 0x92, 0xea, 0x90, 0xbc, 0x82, 0xe8, 0x86, 0xad, 0xaf, 0xb9, 0xa1, 0xac, 0x77, 0x31,
	0x3c, 0x7c, 0x7f, 0x6b, 0x98, 0xda, 0x96, 0xf7, 0xfe, 0x3b, 0x2f, 0xf9, 0xe5, 0xc1, 0x53, 0xfb,
	0xb6, 0xac, 0x1b, 0x9e, 0x21, 0x6b, 0xb6, 0xc7, 0x49, 0x35, 0x81, 0x9e, 0xde, 0xa0, 0xf4, 0x86,
	0x4f, 0x99, 0x53, 0xac, 0x5d, 0xd2, 0x42, 0xd9, 0xd5, 0x4e, 0x3c, 0x97, 0x39, 0xcf, 0x84, 0x07,
	0xcf, 0xfc, 0xf4, 0x60, 0x6c, 0x35, 0xcc, 0xeb, 0x4d, 0xc9, 0x7f, 0xe4, 0x55, 0xbd, 0xe6, 0x39,
	0xb2, 0x62, 0xcd, 0xf3, 0x6f, 0x9c, 0x95, 0x5c, 0x1a, 0x0f, 0x28, 0xa7, 0xa1, 0x8f, 0x4a, 0xf3,
	0x70, 0xc3, 0xa5, 0x01, 0x3d, 0xa1, 0x3a, 0x24, 0x43, 0x88, 0xbe, 0x8a, 0xeb, 0x8d, 0xc5, 0x8a,
	0xa8, 0x4d, 0xc8, 0x73, 0x78, 0x8c, 0x2a, 0x37, 0x96, 0x72, 0x66, 0x41, 0x75, 0xa9, 0x4d, 0xf5,
	0x04, 0x22, 0x54, 0x39, 0x8a, 0x38, 0xb2, 0x4e, 0x43, 0xb5, 0x14, 0xf3, 0x17, 0xb7, 0xfb, 0xb1,
	0xf7, 0x67, 0x3f, 0xf6, 0xfe, 0xed, 0xc7, 0xde, 0x95, 0x93, 0x56, 0xa1, 0x90, 0x7c, 0x5b, 0x14,
	0x1d, 0xf3, 0xf3, 0xbc, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x92, 0xd2, 0xb7, 0x66, 0x03,
	0x00, 0x00,
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.StreamId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamOffset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.To != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.StreamId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SegmentFooter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentFooter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentFooter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastEntryId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.LastEntryId))
		i--
		dAtA[i] = 0x20
	}
	if m.FirstEntryId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.FirstEntryId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StreamOffsets) > 0 {
		for k := range m.StreamOffsets {
			v := m.StreamOffsets[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintPb(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CreateTS != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CreateTS))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamTimeStampOffset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamTimeStampOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamTimeStampOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.TimestampMS != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TimestampMS))
		i--
		dAtA[i] = 0x10
	}
	if m.StreamId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OffsetIndexFileTableHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffsetIndexFileTableHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffsetIndexFileTableHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TsTo != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TsTo))
		i--
		dAtA[i] = 0x28
	}
	if m.TsFrom != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TsFrom))
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ts != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovPb(uint64(m.StreamId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovPb(uint64(m.StreamId))
	}
	if m.From != 0 {
		n += 1 + sovPb(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovPb(uint64(m.To))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentFooter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTS != 0 {
		n += 1 + sovPb(uint64(m.CreateTS))
	}
	if len(m.StreamOffsets) > 0 {
		for k, v := range m.StreamOffsets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovPb(uint64(k)) + 1 + l + sovPb(uint64(l))
			n += mapEntrySize + 1 + sovPb(uint64(mapEntrySize))
		}
	}
	if m.FirstEntryId != 0 {
		n += 1 + sovPb(uint64(m.FirstEntryId))
	}
	if m.LastEntryId != 0 {
		n += 1 + sovPb(uint64(m.LastEntryId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamTimeStampOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovPb(uint64(m.StreamId))
	}
	if m.TimestampMS != 0 {
		n += 1 + sovPb(uint64(m.TimestampMS))
	}
	if m.Offset != 0 {
		n += 1 + sovPb(uint64(m.Offset))
	}
	if m.ID != 0 {
		n += 1 + sovPb(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OffsetIndexFileTableHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovPb(uint64(m.Ts))
	}
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovPb(uint64(m.Count))
	}
	if m.TsFrom != 0 {
		n += 1 + sovPb(uint64(m.TsFrom))
	}
	if m.TsTo != 0 {
		n += 1 + sovPb(uint64(m.TsTo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPb(x uint64) (n int) {
	return sovPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= StreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamOffset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamOffset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamOffset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= StreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentFooter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentFooter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentFooter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTS", wireType)
			}
			m.CreateTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamOffsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamOffsets == nil {
				m.StreamOffsets = make(map[uint64]StreamOffset)
			}
			var mapkey uint64
			mapvalue := &StreamOffset{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StreamOffset{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StreamOffsets[mapkey] = *mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstEntryId", wireType)
			}
			m.FirstEntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstEntryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEntryId", wireType)
			}
			m.LastEntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEntryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamTimeStampOffset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTimeStampOffset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTimeStampOffset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= StreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMS", wireType)
			}
			m.TimestampMS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampMS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffsetIndexFileTableHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: offset_index_file_table_header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: offset_index_file_table_header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsFrom", wireType)
			}
			m.TsFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsFrom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsTo", wireType)
			}
			m.TsTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPb = fmt.Errorf("proto: unexpected end of group")
)
